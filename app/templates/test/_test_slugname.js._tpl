'use strict';


/*
  ASSERT:
    ok(value, [message])
    equal(actual, expected, [message])
    notEqual(actual, expected, [message])
    deepEqual(actual, expected, [message])
    notDeepEqual(actual, expected, [message])
    strictEqual(actual, expected, [message])
    notStrictEqual(actual, expected, [message])
    throws(block, [error], [message])
    doesNotThrow(block, [error], [message])
    ifError(value)

  SHOULD.JS:
    http://shouldjs.github.io/

  Some test frameworks:
    sinon:  function spy
    nock: mock http request
    supertest: test http server
    rewire: modify the behaviour of a module such that you can easily inject mocks and manipulate private variables

  More on http://www.clock.co.uk/blog/tools-for-unit-testing-and-quality-assurance-in-node-js
*/

<% if (esnext) { %>

import <%= safeSlugname %> from '../src/<%= slugfile %>';<% if (testFramework === 'mocha') { %>
import assert from 'should';<% } %>

describe('<%= safeSlugname %>', () => {
  it('should be awesome', () => {<% if (testFramework === 'jasmine') { %>
   expect(<%= safeSlugname %>()).toEqual('awesome');<% } %><% if (testFramework === 'mocha') { %>
   <%= safeSlugname %>().should.equal('awesome');<% } %>
  });
});

<% } else { %>

var <%= safeSlugname %> = require('../');<% if (testFramework === 'mocha') { %>
var assert = require('should');<% } %>

describe('<%= safeSlugname %>', function () {

  it('should be awesome', function () {<% if (testFramework === 'jasmine') { %>
    expect(<%= safeSlugname %>()).toEqual('awesome');<% } %><% if (testFramework === 'mocha') { %>
    <%= safeSlugname %>().should.equal('awesome');<% } %>
  });

});

<% } %>
